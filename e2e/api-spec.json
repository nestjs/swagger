{
  "openapi": "3.0.0",
  "paths": {
    "/api/v1": {
      "get": {
        "operationId": "AppController_getHello_v1",
        "parameters": [
          {
            "name": "x-tenant-id",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "App"
        ]
      }
    },
    "/api/v2": {
      "get": {
        "operationId": "AppController_getHello_v2",
        "parameters": [
          {
            "name": "x-tenant-id",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "App"
        ]
      }
    },
    "/api/v1/alias1": {
      "get": {
        "operationId": "AppController_withAliases[0]_v1",
        "parameters": [
          {
            "name": "x-tenant-id",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "App"
        ]
      }
    },
    "/api/v1/alias2": {
      "get": {
        "operationId": "AppController_withAliases[1]_v1",
        "parameters": [
          {
            "name": "x-tenant-id",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "App"
        ]
      }
    },
    "/api/v2/alias1": {
      "get": {
        "operationId": "AppController_withAliases[2]_v2",
        "parameters": [
          {
            "name": "x-tenant-id",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "App"
        ]
      }
    },
    "/api/v2/alias2": {
      "get": {
        "operationId": "AppController_withAliases[3]_v2",
        "parameters": [
          {
            "name": "x-tenant-id",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "App"
        ]
      }
    },
    "/api/v1/express:colon:another/{prop}": {
      "get": {
        "operationId": "AppController_withColonExpress_v1",
        "parameters": [
          {
            "name": "x-tenant-id",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "App"
        ]
      }
    },
    "/api/v2/express:colon:another/{prop}": {
      "get": {
        "operationId": "AppController_withColonExpress_v2",
        "parameters": [
          {
            "name": "x-tenant-id",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "App"
        ]
      }
    },
    "/api/v1/fastify:{colon}:{another}/{prop}": {
      "get": {
        "operationId": "AppController_withColonFastify_v1",
        "parameters": [
          {
            "name": "x-tenant-id",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "App"
        ]
      }
    },
    "/api/v2/fastify:{colon}:{another}/{prop}": {
      "get": {
        "operationId": "AppController_withColonFastify_v2",
        "parameters": [
          {
            "name": "x-tenant-id",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "App"
        ]
      }
    },
    "/api/cats": {
      "post": {
        "callbacks": {
          "myEvent": {
            "{$request.body#/callbackUrl}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Cat"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Your server returns this code if it accepts the callback"
                  }
                }
              }
            }
          },
          "mySecondEvent": {
            "{$request.body#/callbackUrl}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Cat"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Your server returns this code if it accepts the callback"
                  }
                }
              }
            }
          }
        },
        "operationId": "CatsController_create",
        "parameters": [
          {
            "name": "header",
            "in": "header",
            "description": "Test",
            "required": false,
            "schema": {
              "type": "string",
              "default": "test"
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCatDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The record has been successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cat"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "key2": [],
            "key1": []
          },
          {
            "bearer": []
          },
          {
            "basic": []
          }
        ],
        "summary": "Create cat",
        "tags": [
          "cats",
          "create cats"
        ],
        "x-foo": {
          "test": "bar "
        }
      },
      "get": {
        "operationId": "CatsController_findAll",
        "parameters": [
          {
            "name": "header",
            "in": "header",
            "description": "Test",
            "required": false,
            "schema": {
              "type": "string",
              "default": "test"
            }
          },
          {
            "name": "page",
            "required": true,
            "in": "query",
            "schema": {
              "minimum": 0,
              "maximum": 10000,
              "exclusiveMaximum": true,
              "exclusiveMinimum": true,
              "title": "Page",
              "format": "int32",
              "default": 0,
              "example": 123,
              "type": "number"
            }
          },
          {
            "name": "_sortBy",
            "required": true,
            "in": "query",
            "schema": {
              "nullable": true,
              "example": [
                "sort1",
                "sort2"
              ],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "constrainedLimit",
            "required": true,
            "in": "query",
            "schema": {
              "oneOf": [
                {
                  "minimum": 0,
                  "maximum": 10,
                  "format": "int32"
                },
                {
                  "minimum": 100,
                  "maximum": 100,
                  "format": "int32"
                }
              ],
              "type": "number"
            }
          },
          {
            "name": "enum",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/LettersEnum"
            }
          },
          {
            "name": "enumArr",
            "required": true,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/LettersEnum"
              }
            }
          },
          {
            "name": "letters",
            "required": true,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Letter"
              }
            }
          },
          {
            "name": "beforeDate",
            "required": true,
            "in": "query",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": true,
            "in": "query",
            "schema": {
              "properties": {
                "name": {
                  "type": "string"
                },
                "age": {
                  "type": "number"
                }
              },
              "additionalProperties": true,
              "type": "object"
            }
          },
          {
            "name": "catBreeds",
            "required": true,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "persian",
                  "siamese",
                  "maine-coon"
                ]
              }
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "key2": [],
            "key1": []
          },
          {
            "bearer": []
          },
          {
            "basic": []
          }
        ],
        "tags": [
          "cats",
          "tag2",
          "tag1"
        ],
        "x-codeSamples": [
          {
            "lang": "JavaScript",
            "source": "console.log('Hello World');"
          }
        ],
        "x-multiple": {
          "test": "test"
        }
      }
    },
    "/api/cats/explicit-body": {
      "post": {
        "operationId": "CatsController_createExplicitBody",
        "parameters": [
          {
            "name": "header",
            "in": "header",
            "description": "Test",
            "required": false,
            "schema": {
              "type": "string",
              "default": "test"
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCatDto"
              },
              "examples": {
                "mau": {
                  "summary": "Mau example",
                  "value": {
                    "name": "Mau cat",
                    "age": 5,
                    "breed": "Mau"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "security": [
          {
            "key2": [],
            "key1": []
          },
          {
            "bearer": []
          },
          {
            "basic": []
          }
        ],
        "tags": [
          "cats"
        ]
      }
    },
    "/api/cats/{id}": {
      "get": {
        "operationId": "CatsController_findOne",
        "parameters": [
          {
            "name": "header",
            "in": "header",
            "description": "Test",
            "required": false,
            "schema": {
              "type": "string",
              "default": "test"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The found record",
            "links": {
              "CatsController_findOne_from_kittenIds": {
                "operationId": "CatsController_findOne",
                "parameters": {
                  "id": "$response.body#/kittenIds"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cat"
                }
              }
            }
          }
        },
        "security": [
          {
            "key2": [],
            "key1": []
          },
          {
            "bearer": []
          },
          {
            "basic": []
          }
        ],
        "tags": [
          "cats"
        ],
        "x-auth-type": "NONE"
      }
    },
    "/api/cats/explicit-query": {
      "get": {
        "operationId": "CatsController_findAllWithExplicitQuery",
        "parameters": [
          {
            "name": "header",
            "in": "header",
            "description": "Test",
            "required": false,
            "schema": {
              "type": "string",
              "default": "test"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": true,
            "schema": {
              "minimum": 0,
              "maximum": 10000,
              "exclusiveMaximum": true,
              "exclusiveMinimum": true,
              "title": "Page",
              "format": "int32",
              "default": 0,
              "example": 123
            }
          },
          {
            "name": "_sortBy",
            "in": "query",
            "required": true,
            "schema": {
              "nullable": true,
              "example": [
                "sort1",
                "sort2"
              ]
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "constrainedLimit",
            "in": "query",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "minimum": 0,
                  "maximum": 10,
                  "format": "int32"
                },
                {
                  "minimum": 100,
                  "maximum": 100,
                  "format": "int32"
                }
              ]
            }
          },
          {
            "name": "enum",
            "in": "query",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/LettersEnum"
                }
              ]
            }
          },
          {
            "name": "enumArr",
            "in": "query",
            "required": true,
            "schema": {
              "type": "array"
            }
          },
          {
            "name": "letters",
            "in": "query",
            "required": true,
            "schema": {
              "type": "array"
            }
          },
          {
            "name": "beforeDate",
            "in": "query",
            "required": true,
            "schema": {
              "format": "date-time"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "required": true,
            "schema": {
              "properties": {
                "name": {
                  "type": "string"
                },
                "age": {
                  "type": "number"
                }
              },
              "additionalProperties": true
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "key2": [],
            "key1": []
          },
          {
            "bearer": []
          },
          {
            "basic": []
          }
        ],
        "tags": [
          "cats"
        ]
      }
    },
    "/api/cats/bulk": {
      "get": {
        "operationId": "CatsController_findAllBulk",
        "parameters": [
          {
            "name": "header",
            "in": "header",
            "description": "Test",
            "required": false,
            "schema": {
              "type": "string",
              "default": "test"
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "links": {
              "CatsController_findOne_from_kittenIds": {
                "operationId": "CatsController_findOne",
                "parameters": {
                  "id": "$response.body#/kittenIds"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Cat"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "key2": [],
            "key1": []
          },
          {
            "bearer": []
          },
          {
            "basic": []
          }
        ],
        "summary": "Find all cats in bulk",
        "tags": [
          "cats"
        ]
      },
      "post": {
        "operationId": "CatsController_createBulk",
        "parameters": [
          {
            "name": "header",
            "in": "header",
            "description": "Test",
            "required": false,
            "schema": {
              "type": "string",
              "default": "test"
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "security": [
          {
            "key2": [],
            "key1": []
          },
          {
            "bearer": []
          },
          {
            "basic": []
          }
        ],
        "tags": [
          "cats"
        ]
      }
    },
    "/api/cats/as-form-data": {
      "post": {
        "operationId": "CatsController_createAsFormData",
        "parameters": [
          {
            "name": "header",
            "in": "header",
            "description": "Test",
            "required": false,
            "schema": {
              "type": "string",
              "default": "test"
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CreateCatDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The record has been successfully created.",
            "links": {
              "CatsController_findOne_from_kittenIds": {
                "operationId": "CatsController_findOne",
                "parameters": {
                  "id": "$response.body#/kittenIds"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cat"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "key2": [],
            "key1": []
          },
          {
            "bearer": []
          },
          {
            "basic": []
          }
        ],
        "summary": "Create cat",
        "tags": [
          "cats"
        ]
      }
    },
    "/api/cats/site*": {
      "get": {
        "operationId": "CatsController_getSite",
        "parameters": [
          {
            "name": "header",
            "in": "header",
            "description": "Test",
            "required": false,
            "schema": {
              "type": "string",
              "default": "test"
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "key2": [],
            "key1": []
          },
          {
            "bearer": []
          },
          {
            "basic": []
          }
        ],
        "tags": [
          "cats"
        ]
      }
    },
    "/api/cats/with-enum/{type}": {
      "get": {
        "operationId": "CatsController_getWithEnumParam",
        "parameters": [
          {
            "name": "header",
            "in": "header",
            "description": "Test",
            "required": false,
            "schema": {
              "type": "string",
              "default": "test"
            }
          },
          {
            "name": "type",
            "required": true,
            "in": "path",
            "schema": {
              "enum": [
                "A",
                "B",
                "C"
              ],
              "type": "string"
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "key2": [],
            "key1": []
          },
          {
            "bearer": []
          },
          {
            "basic": []
          }
        ],
        "tags": [
          "cats"
        ]
      }
    },
    "/api/cats/with-enum-named/{type}": {
      "get": {
        "operationId": "CatsController_getWithEnumNamedParam",
        "parameters": [
          {
            "name": "header",
            "in": "header",
            "description": "Test",
            "required": false,
            "schema": {
              "type": "string",
              "default": "test"
            }
          },
          {
            "name": "type",
            "required": true,
            "in": "path",
            "description": "This is a description for 'type' query parameter",
            "deprecated": false,
            "schema": {
              "$ref": "#/components/schemas/Letter"
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "key2": [],
            "key1": []
          },
          {
            "bearer": []
          },
          {
            "basic": []
          }
        ],
        "tags": [
          "cats"
        ]
      }
    },
    "/api/cats/with-random-query": {
      "get": {
        "operationId": "CatsController_getWithRandomQuery",
        "parameters": [
          {
            "name": "header",
            "in": "header",
            "description": "Test",
            "required": false,
            "schema": {
              "type": "string",
              "default": "test"
            }
          },
          {
            "name": "type",
            "required": true,
            "in": "query",
            "schema": {
              "minLength": 10,
              "maxLength": 100,
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "key2": [],
            "key1": []
          },
          {
            "bearer": []
          },
          {
            "basic": []
          }
        ],
        "tags": [
          "cats"
        ]
      }
    },
    "/api/cats/download": {
      "get": {
        "operationId": "CatsController_download",
        "parameters": [
          {
            "name": "header",
            "in": "header",
            "description": "Test",
            "required": false,
            "schema": {
              "type": "string",
              "default": "test"
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "binary file for download",
            "content": {
              "application/pdf": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "image/jpeg": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "key2": [],
            "key1": []
          },
          {
            "bearer": []
          },
          {
            "basic": []
          }
        ],
        "summary": "",
        "tags": [
          "cats"
        ]
      }
    },
    "/api/cats/raw-schema-response": {
      "get": {
        "operationId": "CatsController_rawSchemaResponse",
        "parameters": [
          {
            "name": "header",
            "in": "header",
            "description": "Test",
            "required": false,
            "schema": {
              "type": "string",
              "default": "test"
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The paginated response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Cat"
                      }
                    },
                    "pageInfo": {
                      "type": "object",
                      "properties": {
                        "hasPreviousPage": {
                          "type": "boolean"
                        },
                        "hasNextPage": {
                          "type": "boolean"
                        },
                        "startCursor": {
                          "type": "string"
                        },
                        "endCursor": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "key2": [],
            "key1": []
          },
          {
            "bearer": []
          },
          {
            "basic": []
          }
        ],
        "tags": [
          "cats"
        ]
      }
    }
  },
  "info": {
    "title": "Cats example",
    "description": "The cats API description",
    "version": "1.0",
    "contact": {}
  },
  "tags": [
    {
      "name": "cats",
      "description": ""
    }
  ],
  "servers": [],
  "components": {
    "securitySchemes": {
      "basic": {
        "type": "http",
        "scheme": "basic"
      },
      "bearer": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http"
      },
      "oauth2": {
        "type": "oauth2",
        "flows": {}
      },
      "api_key": {
        "type": "apiKey",
        "in": "header",
        "name": "api_key"
      },
      "key1": {
        "type": "apiKey",
        "in": "header",
        "name": "key1"
      },
      "key2": {
        "type": "apiKey",
        "in": "header",
        "name": "key2"
      },
      "cookie": {
        "type": "apiKey",
        "in": "cookie",
        "name": "connect.sid"
      }
    },
    "schemas": {
      "ExtraModel": {
        "type": "object",
        "properties": {
          "one": {
            "type": "string"
          },
          "two": {
            "type": "number"
          }
        },
        "description": "ExtraModel description",
        "required": [
          "one",
          "two"
        ]
      },
      "LettersEnum": {
        "type": "string",
        "enum": [
          "A",
          "B",
          "C"
        ],
        "description": "This is a description for the LettersEnum schema",
        "deprecated": true
      },
      "TagDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "name"
          }
        },
        "required": [
          "name"
        ]
      },
      "CreateCatDto": {
        "type": "object",
        "properties": {
          "name": {
            "description": "Name of the cat",
            "type": "string"
          },
          "age": {
            "type": "number",
            "minimum": 1,
            "maximum": 200
          },
          "_breed": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uri"
            }
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "urls": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "options": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "isReadonly": {
                  "type": "string"
                }
              }
            }
          },
          "enumWithDescription": {
            "enum": [
              "A",
              "B",
              "C"
            ],
            "type": "string",
            "description": "Enum with description"
          },
          "enum": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LettersEnum"
              }
            ]
          },
          "enumArr": {
            "type": "array",
            "description": "This is a description for the enumArr attribute",
            "items": {
              "$ref": "#/components/schemas/LettersEnum"
            }
          },
          "enumWithRef": {
            "description": "A small assortment of letters (in DTO)?",
            "default": "A",
            "deprecated": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/LettersEnum"
              }
            ]
          },
          "tag": {
            "description": "tag",
            "allOf": [
              {
                "$ref": "#/components/schemas/TagDto"
              }
            ]
          }
        },
        "x-tags": [
          "foo",
          "bar"
        ],
        "required": [
          "name",
          "age",
          "_breed",
          "tags",
          "createdAt",
          "urls",
          "options",
          "enumWithDescription",
          "enum",
          "enumArr",
          "enumWithRef"
        ]
      },
      "Cat": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Kitty",
            "description": "The name of the Cat"
          },
          "age": {
            "type": "number",
            "example": 1,
            "minimum": 0,
            "description": "The age of the Cat"
          },
          "breed": {
            "type": "string",
            "example": "Maine Coon",
            "description": "The breed of the Cat"
          },
          "_tags": {
            "description": "Tags of the cat",
            "example": [
              "tag1",
              "tag2"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "urls": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_options": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "isReadonly": {
                  "type": "string"
                }
              }
            }
          },
          "rawDefinition": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "example": "ErrorName"
              },
              "status": {
                "type": "number",
                "example": 400
              }
            },
            "required": [
              "name",
              "status"
            ]
          },
          "enum": {
            "type": "string",
            "enum": [
              "A",
              "B",
              "C"
            ]
          },
          "enumArr": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "A",
                "B",
                "C"
              ]
            }
          },
          "enumWithRef": {
            "description": "A small assortment of letters?",
            "default": "A",
            "deprecated": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/LettersEnum"
              }
            ]
          },
          "oneOfExample": {
            "oneOf": [
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              {
                "type": "array",
                "items": {
                  "type": "number"
                }
              },
              {
                "type": "array",
                "items": {
                  "type": "boolean"
                }
              }
            ],
            "description": "Array of values that uses \"oneOf\""
          },
          "kittenIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "siblings": {
            "type": "object",
            "properties": {
              "ids": {
                "type": "number"
              }
            },
            "required": [
              "ids"
            ]
          }
        },
        "x-schema-extension-multiple": {
          "test": "test"
        },
        "x-schema-extension": {
          "test": "test"
        },
        "required": [
          "name",
          "age",
          "breed",
          "createdAt",
          "urls",
          "_options",
          "rawDefinition",
          "enum",
          "enumArr",
          "enumWithRef",
          "oneOfExample",
          "kittenIds"
        ]
      },
      "Letter": {
        "type": "string",
        "enum": [
          "A",
          "B",
          "C"
        ],
        "description": "This is a description for the Letters schema",
        "deprecated": true
      }
    }
  },
  "security": [
    {
      "bearer": []
    },
    {
      "basic": [],
      "cookie": []
    }
  ]
}